import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import "../styles/Checkout.css";

const Checkout = () => {
  const [cartItems, setCartItems] = useState([]);
  const [totalPrice, setTotalPrice] = useState(0);
  const [paymentMethod, setPaymentMethod] = useState("COD"); // M·∫∑c ƒë·ªãnh l√† Thanh to√°n khi nh·∫≠n h√†ng
  const navigate = useNavigate();

  useEffect(() => {
    const fetchCart = async () => {
      try {
        const token = localStorage.getItem("token");
        if (!token) {
          alert("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!");
          navigate("/login");
          return;
        }

        const { data } = await axios.get("http://localhost:5000/api/cart", {
          headers: { Authorization: `Bearer ${token}` },
        });

        if (data.cartItems) {
          setCartItems(data.cartItems);
          setTotalPrice(data.totalPrice);
        }
      } catch (error) {
        console.error("L·ªói khi t·∫£i gi·ªè h√†ng:", error);
        alert("L·ªói khi t·∫£i gi·ªè h√†ng!");
      }
    };
    fetchCart();
  }, [navigate]);

  const handleCheckout = async () => {
    try {
        const token = localStorage.getItem("token");
        if (!token) {
            alert("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!");
            navigate("/login");
            return;
        }

        // Ki·ªÉm tra n·∫øu gi·ªè h√†ng tr·ªëng
        if (!cartItems || cartItems.length === 0) {
            alert("Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng!");
            return;
        }

        // Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i l√™n API
        const dataSent = {
            orderItems: cartItems.map((item) => {
                if (!item.product?._id && !item._id) {
                    console.error("‚ùå L·ªói: S·∫£n ph·∫©m kh√¥ng c√≥ ID h·ª£p l·ªá", item);
                    throw new Error("C√≥ s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá trong gi·ªè h√†ng!");
                }

                return {
                    product: item.product?._id || item._id, // ID c·ªßa s·∫£n ph·∫©m
                    name: item.product?.name || item.name,
                    image: item.product?.image || item.image,
                    price: item.product?.price || item.price,
                    qty: item.quantity,
                };
            }),
            totalPrice,
            paymentMethod: "COD",
        };

        console.log("üì¶ D·ªØ li·ªáu g·ª≠i l√™n API:", JSON.stringify(dataSent, null, 2));

        // G·ª≠i request ƒë·∫øn API
        const { data } = await axios.post(
            "http://localhost:5000/api/orders",
            dataSent,
            { headers: { Authorization: `Bearer ${token}` } }
        );

        alert("üéâ ƒê·∫∑t h√†ng th√†nh c√¥ng!");
        setCartItems([]); // X√≥a gi·ªè h√†ng sau khi ƒë·∫∑t h√†ng th√†nh c√¥ng
        localStorage.removeItem("cartItems"); // X√≥a gi·ªè h√†ng kh·ªèi localStorage
        navigate(`/order/${data._id}`);
    } catch (error) {
        console.error("‚ùå L·ªói khi ƒë·∫∑t h√†ng:", error.response?.data || error.message);

        // Hi·ªÉn th·ªã l·ªói r√µ r√†ng h∆°n
        if (error.response?.data?.message) {
            alert(`ƒê·∫∑t h√†ng th·∫•t b·∫°i: ${error.response.data.message}`);
        } else {
            alert("ƒê·∫∑t h√†ng th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i.");
        }
    }
};

  return (
    <div className="checkout-container">
      <h2>Thanh to√°n</h2>
      <div className="checkout-items">
        {cartItems.map((item) => (
          <div key={item._id} className="checkout-item">
            <img src={item.product.image} alt={item.product.name} />
            <div>
              <p>{item.product.name}</p>
              <p>S·ªë l∆∞·ª£ng: {item.quantity}</p>
              <p>Gi√°: {item.product.price.toLocaleString()} VND</p>
            </div>
          </div>
        ))}
      </div>
      <div className="checkout-summary">
        <h3>T·ªïng ti·ªÅn: {totalPrice.toLocaleString()} VND</h3>

        {/* Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n */}
        <div>
          <label>
            <input
              type="radio"
              value="COD"
              checked={paymentMethod === "COD"}
              onChange={() => setPaymentMethod("COD")}
            />
            Thanh to√°n khi nh·∫≠n h√†ng (COD)
          </label>
          <label>
            <input
              type="radio"
              value="Paypal"
              checked={paymentMethod === "Paypal"}
              onChange={() => setPaymentMethod("Paypal")}
            />
            Thanh to√°n qua Paypal
          </label>
        </div>

        <button onClick={handleCheckout}>Thanh to√°n ngay</button>
      </div>
    </div>
  );
};

export default Checkout;